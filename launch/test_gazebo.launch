<launch>

  <remap from="/BLUE/pose" to="/BLUE/ground_truth/pose"/>
  <remap from="/RED/pose" to="/RED/ground_truth/pose"/>

  <node name="cloud" pkg="cloud_coverage" type="cloud.py"/>
  <node name="plotter" pkg="cloud_coverage" type="plotter.py"/>
  <node name="loader" pkg="cloud_coverage" type="landmarks_loader.py"/>

  <arg name="world_name" value="basic"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rotors_gazebo)/worlds/$(arg world_name).world"/>
    <!-- <arg name="debug" value="true"/> -->
    <arg name="paused" value="false"/>
    <!-- <arg name="gui" value="false"/> -->
  </include>

  <arg name="mav_name" value="hummingbird"/>

  <group ns="BLUE">
    <param name="name" value="BLUE"/>
    <param name="arrival_time" value="3"/>
    <node name="controller" pkg="cloud_coverage" type="controller.py">
      <remap from="pose" to="ground_truth/pose"/>
    </node>
    <node name="controller_bridge" pkg="cloud_coverage" type="controller_bridge.py">
      <remap from="pose" to="ground_truth/pose"/>
      <remap from="reference" to="command/pose"/>
    </node>
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="namespace" value="BLUE" />
      <arg name="y" value="-1" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <!--arg name="enable_logging" value="$(arg enable_logging)" /-->
      <arg name="enable_ground_truth" value="true" />
      <!--arg name="log_file" value="$(arg log_file)"/-->
    </include>
    <node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen">
      <rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_$(arg mav_name).yaml"/>
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml"/>
      <remap from="odometry" to="odometry_sensor1/odometry" />
    </node>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  </group>



  <group ns="RED">
    <param name="name" value="RED"/>
    <param name="arrival_time" value="3"/>
    <node name="controller" pkg="cloud_coverage" type="controller.py">
      <remap from="pose" to="ground_truth/pose"/>
    </node>
    <node name="controller_bridge" pkg="cloud_coverage" type="controller_bridge.py">
      <remap from="pose" to="ground_truth/pose"/>
      <remap from="reference" to="command/pose"/>
    </node>
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="namespace" value="RED" />
      <arg name="y" value="1" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <!--arg name="enable_logging" value="$(arg enable_logging)" /-->
      <arg name="enable_ground_truth" value="true" />
      <!--arg name="log_file" value="$(arg log_file)"/-->
    </include>
    <node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen">
      <rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_$(arg mav_name).yaml"/>
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml"/>
      <remap from="odometry" to="odometry_sensor1/odometry" />
    </node>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  </group>



</launch>
